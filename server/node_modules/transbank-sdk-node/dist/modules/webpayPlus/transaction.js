"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.capture = exports.refund = exports.getStatus = exports.commit = exports.create = void 0;
const params_1 = require("~/utils/params");
const request_1 = require("~/utils/request");
/**
 * Create normal transaction
 *
 * @param buyOrder string
 * @param sessionId string
 * @param amount number
 * @param returnUrl string
 * @param options IOptions
 * @returns ITransactionCreateResponse | IErrorResponse
 */
function create(buyOrder, sessionId, amount, returnUrl, options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                url: (0, params_1.getBaseURL)(),
                path: '/rswebpaytransaction/api/webpay/v1.2/transactions',
                method: 'post',
                headers: {
                    'Tbk-Api-Key-Id': options.commerceCode,
                    'Content-Type': 'application/json',
                    'Tbk-Api-Key-Secret': options.apiKey,
                },
                body: {
                    buyOrder,
                    sessionId,
                    amount,
                    returnUrl,
                },
            };
            const { data } = yield (0, request_1.request)(payload);
            return data;
        }
        catch (error) {
            return { status: error.status || 500, message: error.message };
        }
    });
}
exports.create = create;
/**
 * commit transaction
 *
 * @param token
 * @param options
 * @returns
 */
function commit(token, options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                url: (0, params_1.getBaseURL)(),
                method: 'put',
                path: `/rswebpaytransaction/api/webpay/v1.2/transactions/${token}`,
                headers: {
                    'Tbk-Api-Key-Id': options.commerceCode,
                    'Content-Type': 'application/json',
                    'Tbk-Api-Key-Secret': options.apiKey,
                },
            };
            const { data } = yield (0, request_1.request)(payload);
            return data;
        }
        catch (error) {
            return {
                status: error.status || 500,
                message: error.message,
            };
        }
    });
}
exports.commit = commit;
/**
 * Get Transaction Status
 *
 * @param token
 * @param options
 * @returns ITransactionStatusResponse | IErrorResponse
 */
function getStatus(token, options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                url: (0, params_1.getBaseURL)(),
                method: 'get',
                path: `/rswebpaytransaction/api/webpay/v1.2/transactions/${token}`,
                headers: {
                    'Tbk-Api-Key-Id': options.commerceCode,
                    'Content-Type': 'application/json',
                    'Tbk-Api-Key-Secret': options.apiKey,
                },
            };
            const { data } = yield (0, request_1.request)(payload);
            return data;
        }
        catch (error) {
            return {
                status: error.status || 500,
                message: error.message,
            };
        }
    });
}
exports.getStatus = getStatus;
/**
 *  reverse, or nullify transaction, also refund some balance
 *
 * @param token
 * @param amount
 * @returns ITransactionRefundResponse | IErrorResponse>
 */
function refund(token, amount, options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                url: (0, params_1.getBaseURL)(),
                method: 'post',
                path: `/rswebpaytransaction/api/webpay/v1.2/transactions/${token}/refunds`,
                headers: {
                    'Tbk-Api-Key-Id': options.commerceCode,
                    'Content-Type': 'application/json',
                    'Tbk-Api-Key-Secret': options.apiKey,
                },
                body: {
                    amount,
                },
            };
            const { data } = yield (0, request_1.request)(payload);
            return data;
        }
        catch (error) {
            return {
                status: error.status || 500,
                message: error.message,
            };
        }
    });
}
exports.refund = refund;
/**
 * capture transaction
 *
 * @param token
 * @param buyOrder
 * @param authorizationCode
 * @param captureAmount
 * @param options
 * @returns ITransactionCaptureResponse | IErrorResponse
 */
function capture(token, buyOrder, authorizationCode, captureAmount, options) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                url: (0, params_1.getBaseURL)(),
                method: 'put',
                path: `/rswebpaytransaction/api/webpay/v1.2/transactions/${token}/capture`,
                headers: {
                    'Tbk-Api-Key-Id': options.commerceCode,
                    'Content-Type': 'application/json',
                    'Tbk-Api-Key-Secret': options.apiKey,
                },
                body: {
                    buyOrder,
                    authorizationCode,
                    captureAmount,
                },
            };
            const { data } = yield (0, request_1.request)(payload);
            return data;
        }
        catch (error) {
            return {
                status: error.status || 500,
                message: error.message,
            };
        }
    });
}
exports.capture = capture;
//# sourceMappingURL=transaction.js.map