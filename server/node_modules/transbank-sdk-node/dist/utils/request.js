"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
/* eslint-disable consistent-return */
const axios_1 = __importDefault(require("axios"));
const stringFunctions_1 = require("./stringFunctions");
function isAxiosError(candidate) {
    return candidate.isAxiosError === true;
}
function request(req) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = {
            method: req.method,
            baseURL: req.url,
            url: req.path,
            headers: Object.assign({}, req.headers),
            timeout: req.timeout,
        };
        if (['post', 'put', 'patch'].includes(req.method)) {
            payload.data = (0, stringFunctions_1.toUnderScoreKeys)(req.body);
        }
        try {
            const { status, data } = yield axios_1.default
                .request(payload);
            return {
                status,
                data: (0, stringFunctions_1.toCamelCaseKeys)(data),
            };
        }
        catch (error) {
            if (error.message.includes('timeout')) {
                return {
                    status: 408,
                    message: error.message,
                };
            }
            if (isAxiosError(error)) {
                return {
                    status: error.response.status,
                    message: error.response.statusText,
                };
            }
            return {
                status: 500,
                message: error.message,
            };
        }
    });
}
exports.request = request;
//# sourceMappingURL=request.js.map